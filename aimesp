local CONFIG = {
    ESPColor = Color3.fromRGB(173, 216, 230),
    TargetColor = Color3.fromRGB(255, 255, 255),
    PredictionTime = 0.1,
    ESPEnabled = true,
    TargetStrafe = false,
    StrafeDistance = 20,
    StrafeSpeed = 10,
    CircleColor = Color3.fromRGB(255, 255, 255),
    CircleRadius = 0,
    AimbotSmoothness = 0,
    HeadshotPredictionTime = 0.1,
    AimbotFOV = 90,
    StrafeRandomRange = 60,
}

local settings = {
    defaultColor = Color3.fromRGB(255, 0, 0), -- Default ESP color (red)
    teamCheck = false, -- Whether to hide ESP for teammates
    teamColor = true, -- Whether to use team colors for ESP
    healthBarEnabled = true, -- Whether to display health bars
    healthBarWidth = 4, -- Width of the health bar
    healthBarOffset = 2 -- Offset from the left side of the ESP box
}

-- Services
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local localPlayer = players.LocalPlayer

-- Variables
local espCache = {}
local targetPlayer = nil
local aiming = false
local strafeEnabled = CONFIG.TargetStrafe
local strafeAngle = 0
local highlights = {}
local circleIndicators = {}
local currentStrafeSpeed = CONFIG.StrafeSpeed
local directionChangeInterval = 0.143 -- Interval for changing direction
local lastDirectionChange = tick()
local newVector2 = Vector2.new
local newDrawing = Drawing.new
local round = math.round
local tan = math.tan
local rad = math.rad

-- Functions
local wtvp = function(...) local a, b = camera:WorldToViewportPoint(...) return newVector2(a.X, a.Y), b, a.Z end

-- Create ESP box and health bar for a player
local function createEsp(player)
    local esp = {}

    -- Round ESP Box
    esp.box = newDrawing("Circle")
    esp.box.Thickness = 2
    esp.box.Filled = false
    esp.box.Color = settings.defaultColor
    esp.box.Visible = false
    esp.box.ZIndex = 2

    -- Round Health Bar
    if settings.healthBarEnabled then
        esp.healthBar = newDrawing("Circle")
        esp.healthBar.Thickness = settings.healthBarWidth
        esp.healthBar.Color = Color3.fromRGB(0, 255, 0) -- Green color
        esp.healthBar.Visible = false
        esp.healthBar.ZIndex = 2
    end

    espCache[player] = esp
end

-- Remove ESP box and health bar for a player
local function removeEsp(player)
    if espCache[player] then
        for _, drawing in pairs(espCache[player]) do
            drawing:Remove()
        end
        espCache[player] = nil
    end
end

-- Update ESP box and health bar for a player
local function updateEsp(player, esp)
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if character and humanoid then
        local cframe = character:GetModelCFrame()
        local position, visible, depth = wtvp(cframe.Position)

        if visible then
            local scaleFactor = 1 / (depth * tan(rad(camera.FieldOfView / 2)) * 2) * 1000
            local radius = round(2 * scaleFactor)
            local x, y = round(position.X, position.Y)

            -- Update ESP Box
            esp.box.Radius = radius
            esp.box.Position = newVector2(x, y)
            esp.box.Color = settings.teamColor and player.TeamColor.Color or settings.defaultColor
            esp.box.Visible = true

            -- Update Health Bar
            if settings.healthBarEnabled then
                local healthPercent = humanoid.Health / humanoid.MaxHealth
                local barRadius = radius * healthPercent
                esp.healthBar.Radius = round(barRadius)
                esp.healthBar.Position = newVector2(x - radius - settings.healthBarOffset, y)
                esp.healthBar.Color = Color3.fromRGB(255 - round(255 * healthPercent), round(255 * healthPercent), 0) -- Red to Green gradient
                esp.healthBar.Visible = true
            end
        else
            esp.box.Visible = false
            if settings.healthBarEnabled then
                esp.healthBar.Visible = false
            end
        end
    else
        esp.box.Visible = false
        if settings.healthBarEnabled then
            esp.healthBar.Visible = false
        end
    end
end

-- Aimbot Functions
local function getClosestPlayerToCursor()
    local mouse = localPlayer:GetMouse()
    local closestPlayer = nil
    local shortestDistance = math.huge
    for _, player in ipairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local character = player.Character
            local characterPosition = character.HumanoidRootPart.Position
            local screenPosition, onScreen = camera:WorldToScreenPoint(characterPosition)
            if onScreen then
                local mousePosition = Vector2.new(mouse.X, mouse.Y)
                local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - mousePosition).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end
    return closestPlayer
end

local function predictFuturePosition(character, predictionTime)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return Vector3.new(0, 0, 0)
    end
    local velocity = humanoidRootPart.AssemblyLinearVelocity
    local acceleration = humanoidRootPart.AssemblyAngularVelocity
    return humanoidRootPart.Position + (velocity * predictionTime) + (0.5 * acceleration * predictionTime^2)
end

local function predictHeadshotPosition(character, predictionTime)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return Vector3.new(0, 0, 0)
    end
    local head = character:FindFirstChild("Head")
    if not head then
        return humanoidRootPart.Position
    end
    local headPosition = head.Position
    local velocity = humanoidRootPart.AssemblyLinearVelocity
    local acceleration = humanoidRootPart.AssemblyAngularVelocity
    return headPosition + (velocity * predictionTime) + (0.5 * acceleration * predictionTime^2)
end

local function handleAimlockAndStrafe()
    if aiming and targetPlayer and targetPlayer.Character then
        local character = targetPlayer.Character
        local predictedPosition
        if CONFIG.AimbotFOV >= 90 then
            predictedPosition = predictFuturePosition(character, CONFIG.PredictionTime)
        else
            predictedPosition = predictHeadshotPosition(character, CONFIG.HeadshotPredictionTime)
        end

        -- Directly set the camera CFrame to target the predicted position
        camera.CFrame = CFrame.new(camera.CFrame.Position, predictedPosition)

        if strafeEnabled then
            if tick() - lastDirectionChange > directionChangeInterval then
                strafeAngle = math.random(0, 360)
                currentStrafeSpeed = math.random(1, CONFIG.StrafeSpeed * 2)
                lastDirectionChange = tick()
            end

            -- Calculate strafe position around the target with random offset
            local randomOffset = math.random(-CONFIG.StrafeRandomRange, CONFIG.StrafeRandomRange)
            local strafeOffset = (character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).unit * CONFIG.StrafeDistance
            local strafePosition = CFrame.new(character.HumanoidRootPart.Position) * CFrame.Angles(0, math.rad(randomOffset + strafeAngle), 0) * CFrame.new(strafeOffset)

            -- Update the player's position to simulate strafing around the target
            localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(strafePosition.Position, character.HumanoidRootPart.Position)
        end
    end
end

-- Main ESP Handling
for _, player in pairs(players:GetPlayers()) do
    if player ~= localPlayer then
        createEsp(player)
    end
end

players.PlayerAdded:Connect(function(player)
    createEsp(player)
end)

players.PlayerRemoving:Connect(function(player)
    removeEsp(player)
end)

runService:BindToRenderStep("esp", Enum.RenderPriority.Camera.Value, function()
    if CONFIG.ESPEnabled then
        for player, esp in pairs(espCache) do
            if settings.teamCheck and player.Team == localPlayer.Team then
                esp.box.Visible = false
                if settings.healthBarEnabled then
                    esp.healthBar.Visible = false
                end
            else
                updateEsp(player, esp)
            end
        end
    end
    handleAimlockAndStrafe()
end)

-- User Input Handling
local userInputService = game:GetService("UserInputService")
userInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then -- Right-click for aimbot
        targetPlayer = getClosestPlayerToCursor()
        aiming = true
    elseif input.KeyCode == Enum.KeyCode.Y then -- Press 'Y' to toggle strafe
        strafeEnabled = not strafeEnabled
    end
end)

userInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aiming = false
    end
end)
