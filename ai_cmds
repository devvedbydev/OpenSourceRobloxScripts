-- LocalScript placed in StarterPlayerScripts

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local aimlockEnabled = false
local targetPlayer = nil
local predictionTime = 0.2  -- Default prediction time
local highlightColor = Color3.fromRGB(173, 216, 230)  -- Default highlight color for other players
local targetColor = Color3.fromRGB(255, 255, 255)  -- Default color for the target player
local espEnabled = false
local espColor = Color3.fromRGB(173, 216, 230)  -- Default ESP name color
local showNames = false

-- Function to create or update a Highlight effect
local function updateHighlight(character, color)
    local highlight = character:FindFirstChild("Highlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = "Highlight"
        highlight.Adornee = character
        highlight.Parent = character
    end
    highlight.FillColor = color
    highlight.FillTransparency = 0.5
    highlight.OutlineColor = color
    highlight.OutlineTransparency = 0.3
end

-- Function to find a player by name (partial match)
local function findPlayerByName(name)
    name = name:lower()
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Name:lower():match(name) then
            return player
        end
    end
    return nil
end

-- Function to update ESP (Extra Sensory Perception) labels
local function updateESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local espLabel = player.Character:FindFirstChild("ESPLabel")
            if espEnabled then
                if not espLabel then
                    espLabel = Instance.new("BillboardGui")
                    espLabel.Name = "ESPLabel"
                    espLabel.Size = UDim2.new(2, 0, 2, 0)
                    espLabel.StudsOffset = Vector3.new(0, 3, 0)
                    espLabel.AlwaysOnTop = true
                    espLabel.Parent = player.Character

                    local nameLabel = Instance.new("TextLabel")
                    nameLabel.Name = "Name"
                    nameLabel.Text = player.Name
                    nameLabel.Font = Enum.Font.SourceSansBold
                    nameLabel.TextSize = 14
                    nameLabel.TextColor3 = espColor
                    nameLabel.BackgroundTransparency = 1
                    nameLabel.Parent = espLabel

                    if showNames then
                        nameLabel.Visible = true
                    else
                        nameLabel.Visible = false
                    end
                else
                    local nameLabel = espLabel:FindFirstChild("Name")
                    if nameLabel then
                        nameLabel.TextColor3 = espColor
                        nameLabel.Visible = showNames
                    end
                end
            else
                if espLabel then
                    espLabel:Destroy()
                end
            end
        end
    end
end

-- Function to predict the future position of a player
local function predictFuturePosition(character, predictionTime)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return humanoidRootPart.Position
    end

    local velocity = humanoidRootPart.Velocity
    local futurePosition = humanoidRootPart.Position + (velocity * predictionTime)
    return futurePosition
end

-- Function to handle aimlock logic
local function handleAimlock()
    if aimlockEnabled and targetPlayer and targetPlayer.Character then
        local character = targetPlayer.Character
        local predictedPosition = predictFuturePosition(character, predictionTime)

        -- Update camera CFrame to aim at the predicted position
        local cameraPosition = Camera.CFrame.Position
        Camera.CFrame = CFrame.new(cameraPosition, predictedPosition)
    end
end

-- Toggle aimlock on/off with chat commands
local function toggleAimlock(enable)
    aimlockEnabled = enable
    if aimlockEnabled then
        targetPlayer = getClosestPlayerToCursor()
        if targetPlayer then
            print("Aimlock enabled. Targeting: " .. targetPlayer.Name)
        else
            print("No target found.")
        end
    else
        targetPlayer = nil
        print("Aimlock disabled.")
    end
end

-- Toggle ESP on/off with chat commands
local function toggleESP(enable)
    espEnabled = enable
    if espEnabled then
        updateESP()
        print("ESP enabled.")
    else
        updateESP()
        print("ESP disabled.")
    end
end

-- Function to handle commands from the local player
local function handleCommands(message)
    local lowerMessage = message:lower()

    if lowerMessage == ".lock on" then
        toggleAimlock(true)
    elseif lowerMessage == ".lock off" then
        toggleAimlock(false)
    elseif lowerMessage == ".bind" then
        print("Current bind for aimlock: Q")
    elseif lowerMessage:match("%.bind .+") then
        local key = lowerMessage:match("%.bind (.+)")
        print("Changed aimlock bind to " .. key)
    elseif lowerMessage == ".aicmds" then
        print(".lock on - Enable aimlock")
        print(".lock off - Disable aimlock")
        print(".bind - Print current bind for aimlock")
        print(".bind key_here - Change aimlock bind to specified key")
        print(".esp on - Enable ESP")
        print(".esp off - Disable ESP")
        print(".target playername - Highlight specific player")
        print(".target reset - Remove targeting highlight")
        print(".highlightcolour rgb_colour_code - Change highlight color")
        print(".targetcolour rgb_colour_code - Change aimlock target color")
        print(".espcolour rgb_colour_code - Change ESP name color")
        print(".names on - Show names in ESP")
        print(".names off - Hide names in ESP")
        print(".prediction value - Change prediction time")
    elseif lowerMessage == ".esp on" then
        toggleESP(true)
    elseif lowerMessage == ".esp off" then
        toggleESP(false)
    elseif lowerMessage:match("%.target .+") then
        local playerName = lowerMessage:match("%.target (.+)")
        local player = findPlayerByName(playerName)
        if player then
            targetPlayer = player
            print("Targeting: " .. targetPlayer.Name)
        else
            print("Player not found.")
        end
    elseif lowerMessage == ".target reset" then
        targetPlayer = nil
        print("Targeting reset.")
    elseif lowerMessage:match("%.highlightcolour %d+") then
        local r, g, b = lowerMessage:match("%.highlightcolour (%d+) (%d+) (%d+)")
        highlightColor = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
        print("Highlight color changed.")
    elseif lowerMessage:match("%.targetcolour %d+") then
        local r, g, b = lowerMessage:match("%.targetcolour (%d+) (%d+) (%d+)")
        targetColor = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
        print("Target color changed.")
    elseif lowerMessage:match("%.espcolour %d+") then
        local r, g, b = lowerMessage:match("%.espcolour (%d+) (%d+) (%d+)")
        espColor = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
        updateESP()
        print("ESP color changed.")
    elseif lowerMessage == ".names on" then
        showNames = true
        updateESP()
        print("Names in ESP enabled.")
    elseif lowerMessage == ".names off" then
        showNames = false
        updateESP()
        print("Names in ESP disabled.")
    elseif lowerMessage:match("%.prediction %d+") then
        local value = tonumber(lowerMessage:match("%.prediction (%d+)"))
        predictionTime = value / 10  -- Assuming the value is given as milliseconds, convert to seconds
        print("Prediction time changed to " .. predictionTime .. " seconds.")
    else
        print("Unknown command. Type '.aicmds' to see available commands.")
    end
end

-- Handle chat messages
LocalPlayer.Chatted:Connect(function(message)
    if message:sub(1, 1) == "." then
        handleCommands(message)
    end
end)

-- Function to find the closest player to the mouse cursor
local function getClosestPlayerToCursor()
    local mouse = LocalPlayer:GetMouse()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local character = player.Character
            local characterPosition = character.HumanoidRootPart.Position
            local screenPosition, onScreen = Camera:WorldToScreenPoint(characterPosition)

            if onScreen then
                local mousePosition = Vector2.new(mouse.X, mouse.Y)
                local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - mousePosition).Magnitude

                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Update highlights and aimlock logic continuously
RunService.RenderStepped:Connect(function()
    -- Update highlights for all players
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            if player == targetPlayer then
                updateHighlight(player.Character, targetColor)  -- Target color
            else
                updateHighlight(player.Character, highlightColor)  -- Regular highlight color
            end
        end
    end

    -- Handle aimlock logic if enabled
    handleAimlock()

    -- Update ESP
    updateESP()
end)

-- Connect to PlayerAdded event to handle new players joining
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if player ~= LocalPlayer then
            updateHighlight(character, highlightColor)  -- Regular highlight color
        end
    end)
end)

-- Optionally, if you want to keep updating as players leave or join
Players.PlayerRemoving:Connect(function(player)
    if player.Character then
        local highlight = player.Character:FindFirstChild("Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end)
